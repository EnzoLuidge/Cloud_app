version: 0.2

env:
  secrets-manager:
    GITHUB_TOKEN: MyGithubToken:github_token

phases:
  pre_build:
    commands:
      - echo "Installing dependencies..."
      - pip install awscli jq
      - echo "Retrieving GitHub token from Secrets Manager..."
      - export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id MyGithubToken --query SecretString --output text | jq -r '.github_token')
      - git config --global credential.helper 'store --file ~/.my-credentials'
      - echo "https://$GITHUB_TOKEN:@github.com" > ~/.my-credentials
  build:
    commands:
      - echo "Building and deploying the application..."
      - export STACK_NAME=$(aws cloudformation describe-stacks --query "Stacks[0].StackName" --output text --region sa-east-1 || echo "MyCloudAppStack")
      - TEMPLATE_FILE=YAML/template.yaml
      - |
        check_stack_status() {
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text)
          echo "Current stack status: $STACK_STATUS"
        }

        wait_for_stack_complete() {
          while true; do
            check_stack_status
            if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
              break
            elif [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ] || [ "$STACK_STATUS" = "UPDATE_IN_PROGRESS" ]; then
              echo "Stack operation in progress, waiting..."
              sleep 30
            else
              echo "Stack in unexpected state: $STACK_STATUS"
              exit 1
            fi
          done
        }

        check_stack_status
        if [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ] || [ "$STACK_STATUS" = "UPDATE_IN_PROGRESS" ]; then wait_for_stack_complete; fi

        if ! aws cloudformation describe-stacks --stack-name $STACK_NAME; then
          echo "Stack does not exist, creating..."
          aws cloudformation create-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --capabilities CAPABILITY_IAM
          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
        else
          echo "Stack exists, updating..."
          set +e
          aws cloudformation update-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --capabilities CAPABILITY_IAM
          UPDATE_STATUS=$?
          set -e
          if [ $UPDATE_STATUS -ne 0 ] && [ $UPDATE_STATUS -ne 255 ]; then
            echo "Update failed with status: $UPDATE_STATUS"
            exit 1
          elif [ $UPDATE_STATUS -eq 255 ]; then
            echo "No updates are to be performed."
          else
            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
          fi
        fi
artifacts:
  files:
    - '**/*'
